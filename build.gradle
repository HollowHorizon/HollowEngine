buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.9.0'
    }
}

plugins {
    id "org.jetbrains.kotlin.jvm" version "1.9.0"
    id "org.jetbrains.kotlin.plugin.serialization" version "1.9.0"
}
apply plugin: 'kotlin'
apply plugin: "java"
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'org.spongepowered.mixin'

group = 'ru.hollowhorizon'
version = '1.0'

java {
    archivesBaseName = 'hollowengine'
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

sourceSets {
    main {
        java {
            srcDirs 'run/hollowengine/scripts'
        }
    }
}

minecraft {
    mappings channel: 'parchment', version: '2022.11.06-1.18.2'

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            jvmArg "-XX:+AllowEnhancedClassRedefinition"
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            arg "-mixin.config=hollowengine.mixins.json"
            mods {
                hollowengine {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            jvmArg "-XX:+AllowEnhancedClassRedefinition"
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            arg "-mixin.config=hollowengine.mixins.json"
            mods {
                hollowengine {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            jvmArg "-XX:+AllowEnhancedClassRedefinition"
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'hollowengine', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                hollowengine {
                    source sourceSets.main
                }
            }
        }
    }
}

mixin {
    add sourceSets.main, "hollowengine.refmap.json"

    config "hollowengine.mixins.json"

    checks.interfaces = true

    debug = true
    debug.countInjections = true
    debug.verbose = true
    debug.export = true
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenCentral()
    flatDir {
        dir '../HollowCore/build/libs'
        dir 'hc'
    }
}

configurations {
    implementation.extendsFrom(shade)
}

compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"

dependencies {
    minecraft 'net.minecraftforge:forge:1.18.2-40.2.10'

    if (file("libs").exists()) {
        file("libs").eachFile { file ->
            def splitPos = file.name.lastIndexOf("-")
            def modartifact = file.name.substring(0, splitPos)
            def modversion = file.name.substring(splitPos + 1, file.name.length() - 4)
            def modreference = "lib:$modartifact:$modversion"

            dependencies {
                implementation fg.deobf(project.dependencies.create(modreference) {
                    transitive = false
                })
            }
        }
    }

    implementation fg.deobf('ru.hollowhorizon:hc:1.1.0')

    //implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.9.0'

    //implementation 'org.jetbrains.kotlin:kotlin-scripting-jvm-host:1.9.0'
    //implementation 'org.jetbrains.kotlin:kotlin-scripting-jvm:1.9.0'

    //implementation 'org.jetbrains.kotlin:kotlin-scripting-compiler-embeddable:1.9.0'
    //implementation 'org.jetbrains.kotlin:kotlin-scripting-compiler-impl-embeddable:1.9.0'
    //implementation 'org.jetbrains.kotlin:kotlin-compiler-embeddable:1.9.0'
    //implementation 'org.jetbrains.kotlin:kotlin-script-runtime:1.9.0'

    //implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4'
    //implementation 'org.jetbrains.kotlinx:kotlinx-serialization-core:1.5.0'

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

jar {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)

    from sourceSets.main.output

    exclude()

    from { configurations.shade.collect { it.isDirectory() ? it : zipTree(it) } }

    manifest {
        attributes([
                "Specification-Title"     : "hollowengine",
                //"Specification-Vendor": "hollowengine authors",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                //"Implementation-Vendor": "hollowengine authors",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs"            : "hollowengine.mixins.json"
        ])
    }

    finalizedBy('reobfJar')
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        freeCompilerArgs = Arrays.asList("-Xjvm-default=all", "-Xopt-in=kotlin.RequiresOptIn")
        jvmTarget = "17"
        languageVersion = "1.9"
    }
}
